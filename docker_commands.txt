Certainly! Here are additional Docker commands that cover more advanced usage and various aspects of Docker management:

### Additional Docker Commands:

#### **Image Management**:
- `docker pull <image>:<tag>`: Download a specific version of an image.
- `docker search <term>`: Search for images on Docker Hub.
- `docker history <image>`: Show the history of an image.

#### **Container Lifecycle**:
- `docker create <image>`: Create a new container without starting it.
- `docker attach <container>`: Attach your terminal to a running container.
- `docker kill <container>`: Kill a running container.
- `docker pause <container>`: Pause all processes within a container.
- `docker unpause <container>`: Unpause all processes within a container.
- `docker rename <old_name> <new_name>`: Rename a container.

#### **Container Statistics and Monitoring**:
- `docker stats <container>`: Display a live stream of resource usage statistics for containers.
- `docker top <container>`: Display the running processes of a container.

#### **Network Management**:
- `docker network inspect <network>`: Display detailed information about a network.
- `docker network disconnect <network> <container>`: Disconnect a container from a network.
- `docker network rm <network>`: Remove a Docker network.

#### **Volume Management**:
- `docker volume inspect <volume>`: Display detailed information about a volume.
- `docker volume ls -f dangling=true`: List only dangling (unused) volumes.

#### **Docker Compose**:
- `docker-compose up`: Start and run all services defined in a `docker-compose.yml` file.
- `docker-compose down`: Stop and remove containers, networks, and volumes created by `docker-compose up`.
- `docker-compose build`: Build or rebuild services defined in a `docker-compose.yml` file.
- `docker-compose logs`: View output from services defined in `docker-compose.yml`.
- `docker-compose ps`: List containers for a Compose project.
- `docker-compose exec <service> <command>`: Execute a command in a running service container.

#### **Advanced Usage**:
- `docker cp <container>:<path> <host_path>`: Copy files or directories from a container to the host.
- `docker cp <host_path> <container>:<path>`: Copy files or directories from the host to a container.
- `docker commit <container> <new_image>`: Create a new image from a container‚Äôs changes.
- `docker export <container> > <file>.tar`: Export a container‚Äôs filesystem as a tar archive.
- `docker import <file>.tar`: Import the contents from a tarball to create a filesystem image.

### Enhanced LinkedIn Post

---

üöÄ **Mastering Docker: Essential Commands for Container Management** üê≥

Docker has become a cornerstone of modern DevOps practices, simplifying the development, deployment, and scaling of applications. Here are some key Docker commands that every developer and sysadmin should know:

üîπ **Docker Basics**:
- `docker --version`: Check the installed Docker version.
- `docker info`: Display system-wide information about Docker.

üîπ **Working with Images**:
- `docker pull <image>`: Download an image from a Docker registry.
- `docker images`: List all downloaded Docker images.
- `docker rmi <image>`: Remove a Docker image.
- `docker search <term>`: Search for images on Docker Hub.
- `docker history <image>`: Show the history of an image.

üîπ **Managing Containers**:
- `docker run <image>`: Run a container from a Docker image.
- `docker ps`: List all running containers.
- `docker ps -a`: List all containers (running and stopped).
- `docker stop <container>`: Stop a running container.
- `docker start <container>`: Start a stopped container.
- `docker restart <container>`: Restart a container.
- `docker rm <container>`: Remove a stopped container.
- 'docker rm <container1> <container2> <container3> : to remove all container at once also you can use first 2 or 3 character of container id to mention
- `docker create <image>`: Create a new container without starting it.
- `docker attach <container>`: Attach your terminal to a running container.
- `docker kill <container>`: Kill a running container.
- `docker pause <container>`: Pause all processes within a container.
- `docker unpause <container>`: Unpause all processes within a container.
- `docker rename <old_name> <new_name>`: Rename a container.

üîπ **Inspecting and Accessing Containers**:
- `docker logs <container>`: View the logs of a container.
- `docker exec -it <container> /bin/bash`: Access a running container‚Äôs shell interactively.
- `docker inspect <container>`: Display detailed information about a container.
- `docker top <container>`: Display the running processes of a container.

üîπ **Networking and Volumes**:
- `docker network ls`: List all Docker networks.
- `docker network create <network>`: Create a new Docker network.
- `docker network connect <network> <container>`: Connect a container to a network.
- `docker network disconnect <network> <container>`: Disconnect a container from a network.
- `docker network inspect <network>`: Display detailed information about a network.
- `docker network rm <network>`: Remove a Docker network.
- `docker volume ls`: List all Docker volumes.
- `docker volume create <volume>`: Create a new Docker volume.
- `docker volume rm <volume>`: Remove a Docker volume.
- `docker volume inspect <volume>`: Display detailed information about a volume.
- `docker volume ls -f dangling=true`: List only dangling (unused) volumes.

üîπ **Cleaning Up**:
- `docker system prune`: Remove all stopped containers, unused networks, and dangling images.
- `docker volume prune`: Remove all unused volumes.

üîπ **Docker Compose**:
- `docker-compose up`: Start and run all services defined in a `docker-compose.yml` file.
- `docker-compose down`: Stop and remove containers, networks, and volumes created by `docker-compose up`.
- `docker-compose build`: Build or rebuild services defined in a `docker-compose.yml` file.
- `docker-compose logs`: View output from services defined in `docker-compose.yml`.
- `docker-compose ps`: List containers for a Compose project.
- `docker-compose exec <service> <command>`: Execute a command in a running service container.

   **Advanced Usage**:
- `docker cp <container>:<path> <host_path>`: Copy files or directories from a container to the host.
- `docker cp <host_path> <container>:<path>`: Copy files or directories from the host to a container.
- `docker commit <container> <new_image>`: Create a new image from a container‚Äôs changes.
- `docker export <container> > <file>.tar`: Export a container‚Äôs filesystem as a tar archive.
- `docker import <file>.tar`: Import the contents from a tarball to create a file
